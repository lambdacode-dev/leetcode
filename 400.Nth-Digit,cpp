class Solution {
    //[binary search]
    //(time, space) = O(logN) O(1)
public:
    int findNthDigit(int n) {
        int num[] = { 0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 }; 
        int count[10] = {
            0,
            (10 - 1) * 1, // # of numbers with 1 digit 
            (100 - 10) * 2, // # of numbers with 2 digit 
            (1000 - 100) * 3, 
            (10000 - 1000) * 4, 
            (100000 - 10000) * 5, 
            (1000000 - 100000) * 6, 
            (10000000 - 1000000) * 7, 
            (100000000 - 10000000) * 8, 
            (1000000000 - 100000000) * 9 // # of numbers with 9 digit 
            };
        for(int i = 2; i < 10; ++i) { // make it accumulated counts
            count[i] += count[i-1];
        }
        int i = lower_bound(count, count+9, n) - count; // i >= 1: numbers of i digits where nth digit is located
        n -= count[i-1] + 1; // n-th digit within the group of i digits numbers
        int m = n % i; 
        n = num[i] + n/i; // now n-th number in the block, and m-th digit within the number 
        for(int j = m+1; j < i; ++j)
            n /= 10;
        return n % 10;
    }
};
