class Solution {
    //[binary search]
    //(time, space) = O(1) O(1)
public:
    bool isPowerOfThree(int n) {
        //3^0 ... 3^19
        constexpr int power3[20] = {1, 3, 3*3, 3*3*3, 3*3*3*3, 3*3*3*3*3, 3*3*3*3*3*3, 3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3};

        if(n < 0 || ! (n & 0b01) ) return false;
        auto i = lower_bound(power3, power3+20, n);
        return i != power3+20 && *i == n;
    }
};
