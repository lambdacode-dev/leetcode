class Solution {
    //[binary search]
    //(time, space) = O(1) O(1)
public:
    bool isPowerOfThree(int n) {
        //3^0 ... 3^19
        constexpr int power3[20] = {1, 3, 3*3, 3*3*3, 3*3*3*3, 3*3*3*3*3, 3*3*3*3*3*3, 3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3, 3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3*3};
        
        if(! (n & 0b01) ) return false;
        
        for(int l = 0, h = 19; l <= h; ) {
            int m = (l+h)/2;
            if(power3[m] == n) 
                return true;
            
            power3[m] > n ? h = m-1 : l = m+1;
        }
        return false;
        
    }
};
